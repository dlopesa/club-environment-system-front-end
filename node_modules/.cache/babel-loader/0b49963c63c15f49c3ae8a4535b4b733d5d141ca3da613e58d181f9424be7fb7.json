{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matas K\\\\Desktop\\\\Stuff\\\\Uni\\\\4th_semester\\\\SEP4\\\\club-environment-system-front-end\\\\src\\\\TemperatureComponent.js\",\n  _s = $RefreshSig$();\n//Notes temperature means reading, It's because I was doing first for only temperature\n//so then I just addapted the code and didn't have time to rename everything\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureComponent = () => {\n  _s();\n  const [temperatureData, setTemperatureData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        //it would be really cool if someone can figure how to import the json before\n        // (as react is imported on line 3)\n        //For some reason when I try to do it gives a strange error that it start reading some html random file\n        //But if not no worries it works like it is rn\n        const response = await fetch(\"/temperature.json\"); //this file is located at public foalder so before \"SRC\"\n        const data = await response.json();\n        setTemperatureData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 300000); // Refresh every 5 minutes\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Readings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), temperatureData.length > 0 ? temperatureData.map((reading, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"ID: \", index + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", reading.temperature]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Humidity: \", reading.humidity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"CO2: \", reading.co2]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sound: \", reading.sound]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Light: \", reading.light]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Code: \", reading.code]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Received: \", reading.timeReceived]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No temperature data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureComponent, \"rtepXfiD103PZq8frRpqxZ5d/xo=\");\n_c = TemperatureComponent;\nexport default TemperatureComponent;\nvar _c;\n$RefreshReg$(_c, \"TemperatureComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TemperatureComponent","_s","temperatureData","setTemperatureData","fetchData","response","fetch","data","json","error","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","reading","index","temperature","humidity","co2","sound","light","code","timeReceived","_c","$RefreshReg$"],"sources":["C:/Users/Matas K/Desktop/Stuff/Uni/4th_semester/SEP4/club-environment-system-front-end/src/TemperatureComponent.js"],"sourcesContent":["//Notes temperature means reading, It's because I was doing first for only temperature\r\n//so then I just addapted the code and didn't have time to rename everything\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst TemperatureComponent = () => {\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        //it would be really cool if someone can figure how to import the json before\r\n        // (as react is imported on line 3)\r\n        //For some reason when I try to do it gives a strange error that it start reading some html random file\r\n        //But if not no worries it works like it is rn\r\n        const response = await fetch(\"/temperature.json\"); //this file is located at public foalder so before \"SRC\"\r\n        const data = await response.json();\r\n        setTemperatureData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 300000); // Refresh every 5 minutes\r\n\r\n    return () => clearInterval(interval); // Clean up the interval on component unmount\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <th>Readings</th>\r\n        {temperatureData.length > 0 ? (\r\n          temperatureData.map((reading, index) => (\r\n            <div key={index}>\r\n              <h2>ID: {index + 1}</h2>\r\n              <p>Temperature: {reading.temperature}</p>\r\n              <p>Humidity: {reading.humidity}</p>\r\n              <p>CO2: {reading.co2}</p>\r\n              <p>Sound: {reading.sound}</p>\r\n              <p>Light: {reading.light}</p>\r\n              <p>Code: {reading.code}</p>\r\n              <p>Time Received: {reading.timeReceived}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No temperature data available</p>\r\n        )}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}